plugins {
    id 'java-library'
    id 'idea'
    id 'checkstyle'
    id 'pmd'
    alias(libs.plugins.jacoco)
    alias(libs.plugins.avro)
    id 'jvm-test-suite'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "$LIBRARY_GROUP"
            artifactId = "$LIBRARY_NAME"
            version = "$LIBRARY_VERSION"

            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/sanuscorp/transbeamer"
            credentials {
                username = "$GITHUB_ORG"
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

repositories {
    gradlePluginPortal()
    mavenCentral()
    mavenLocal()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}
tasks.withType(JavaCompile).configureEach {
    // Add the -parameters flag to the javac compiler, which allows the
    // @DefaultSchema(...) and other annotations to work
    options.compilerArgs << '-parameters'
}

pmd {
    consoleOutput = true
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }
    }
}

tasks.named('test') {
    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Set the log4j2 configuration file
    systemProperty 'log4j.configurationFile', "${project.projectDir}/src/main/resources/log4j2.xml"

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

checkstyle {
    toolVersion = "10.12.2"
    configDirectory = file("./config/checkstyle")
}

pmd {
    toolVersion = "6.55.0"
    ruleSets = []
    ruleSetFiles = files("./config/pmd/pmd.xml")
}

// Set the base name for all JAR tasks
jar {
    archiveBaseName = LIBRARY_NAME
    archiveVersion = LIBRARY_VERSION
}

// Also apply to source and javadoc JARs
tasks.withType(Jar) {
    archiveBaseName = LIBRARY_NAME
    archiveVersion = LIBRARY_VERSION
}

// Alter dependencies so that "check" only lints, and "test" only tests, and
// "build" does both.
check.dependsOn = []
build.dependsOn = [check, test]

dependencies {
    implementation libs.bundles.beam
    implementation libs.bundles.hadoop

    // Common/Utility dependencies
    implementation libs.bundles.log4j
    implementation libs.checker.qual
    implementation libs.slf4j.nop
    implementation libs.opencsv
    implementation libs.gson

    // Avro dependencies
    implementation libs.avro

    // Test Dependencies
    testImplementation libs.bundles.testing
}

// Run lint tasks on check
tasks.named('check') {
    dependsOn 'checkstyleMain', 'checkstyleTest', 'pmdMain', 'pmdTest'
}
