plugins {
    id 'java'
    id 'de.undercouch.download' version '5.3.0'  // Plugin for downloading files
}

repositories {
    mavenCentral()
    mavenLocal()
}

tasks.named('clean') {
    delete 'build'
    delete 'data'
}

// Define Nessie version in one place for easier updates
def nessieVersion = '0.103.3'
def nessieJarName = "nessie-quarkus-${nessieVersion}-runner.jar"

// Define Trino version in one place for easier updates
def trinoVersion = '474'
def trinoCliJarName = "trino-cli-${trinoVersion}-executable.jar"
def trinoServerTgzName = "trino-server-${trinoVersion}.tar.gz"

// Create build directory if it doesn't exist
def buildDir = new File(projectDir, "build")
buildDir.mkdirs()

// Create the data warehouse directory if it doesn't exist
def warehouseDir = new File(projectDir, "data/warehouse")
warehouseDir.mkdirs()

// Define the path for the JAR files in the build directory
def nessieJarPath = new File(buildDir, nessieJarName)
def trinoCliJarPath = new File(buildDir, trinoCliJarName)
def trinoServerTgzPath = new File(buildDir, trinoServerTgzName)

// Task to download the Nessie runner JAR
tasks.register('downloadNessie', Download) {
    src "https://repo1.maven.org/maven2/org/projectnessie/nessie/nessie-quarkus/${nessieVersion}/nessie-quarkus-${nessieVersion}-runner.jar"
    dest nessieJarPath
    overwrite false  // Don't re-download if the file exists
}

// Task to launch Nessie using "java -jar" approach
tasks.register('runNessie', Exec) {
    description = 'Run the Nessie server using java -jar'
    dependsOn downloadNessie

    // Set the working directory
    workingDir rootProject.projectDir

    // Use the java executable from the current JVM
    def javaExecutable = new File(System.getProperty('java.home'), 'bin/java')

    // Command to execute: java -jar path/to/nessie-jar with configuration properties
    commandLine javaExecutable.path,
            '-Dnessie.warehouse.base-location=' + warehouseDir,
            '-Dnessie.version.store.type=ROCKSDB',
            '-Dnessie.version.store.persist.rocks.database-path=' + "${projectDir}/data/nessie-db",
            '-jar',
            nessieJarPath.absolutePath

    group = 'application'
}

// Task to download the Trino CLI JAR
tasks.register('downloadTrinoCLI', Download) {
    src "https://repo1.maven.org/maven2/io/trino/trino-cli/${trinoVersion}/trino-cli-${trinoVersion}-executable.jar"
    dest trinoCliJarPath
    overwrite false  // Don't re-download if the file exists
}

tasks.register('makeTrinoCli') {
    dependsOn downloadTrinoCLI

    doLast {
        def scriptFile = new File(projectDir, "trino-cli.sh")
        scriptFile.text = """#!/bin/bash
export TRINO_CONFIG_PATH="${projectDir}/tools/trino-config"
java -jar ${trinoCliJarPath.absolutePath} --server localhost:8080 --catalog nessie
"""
        scriptFile.setExecutable(true)
        println "Created.  Run it with: ./trino-cli.sh"
    }
}

tasks.register('downloadTrinoServer', Download) {
    src "https://repo1.maven.org/maven2/io/trino/trino-server/${trinoVersion}/${trinoServerTgzName}"
    dest trinoServerTgzPath
    overwrite false
}

// Task to extract the Trino Server tar.gz file
tasks.register('extractTrinoServer', Exec) {
    description = 'Extract the Trino Server tar.gz file'
    dependsOn downloadTrinoServer

    // Set the working directory to the build directory
    workingDir buildDir

    // Command to execute: tar -xzf filename
    commandLine 'tar', '-xzf', trinoServerTgzPath.name

    // Only run if the tar.gz file exists
    onlyIf {
        trinoServerTgzPath.exists()
    }

    group = 'application'
}

// Task to execute the Trino Server launcher script
tasks.register('startTrino', Exec) {
    description = 'Start the Trino server'
    dependsOn extractTrinoServer

    // Set the working directory to where your Trino server is extracted
    workingDir "${projectDir}/build/trino-server-${trinoVersion}"

    // Path to your custom configuration directory
    def customConfigDir = "${projectDir}/trino-config"

    // Command to execute the Trino server launcher with custom config
    commandLine "${workingDir}/bin/launcher", "--etc-dir=${customConfigDir}", "run"

    // For better visibility of the process
    standardOutput = System.out
    errorOutput = System.err
}